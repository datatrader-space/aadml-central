# Generated by Django 3.2 on 2025-07-18 10:59

import creator.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sessionbot', '0130_auto_20250718_1559'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIServiceProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique name for the provider', max_length=100, unique=True)),
                ('provider_name', models.CharField(help_text='Name of the service provider', max_length=100, verbose_name='Provider Name')),
                ('api_key', models.CharField(help_text='API key for the provider service', max_length=255)),
            ],
            options={
                'verbose_name': 'AI Service Provider',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EmailProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique name for the email provider', max_length=100, unique=True)),
                ('imap_email_host', models.CharField(help_text='IMAP server hostname', max_length=200, unique=True)),
                ('imap_email_port', models.PositiveIntegerField(help_text='IMAP server port number')),
                ('imap_email_username', models.EmailField(help_text='Email address for authentication', max_length=100, unique=True)),
                ('imap_email_password', models.CharField(help_text='Password for authentication', max_length=100)),
            ],
            options={
                'verbose_name': 'Email Provider',
            },
        ),
        migrations.CreateModel(
            name='PhoneNumberProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique name for the provider', max_length=100, unique=True)),
                ('provider_name', models.CharField(help_text='Name of the service provider', max_length=100, verbose_name='Provider Name')),
                ('api_key', models.CharField(help_text='API key for the provider service', max_length=255)),
            ],
            options={
                'verbose_name': 'Phone Number Provider',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProxyProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique name for the provider', max_length=100, unique=True)),
                ('provider_name', models.CharField(help_text='Name of the service provider', max_length=100, verbose_name='Provider Name')),
                ('api_key', models.CharField(help_text='API key for the provider service', max_length=255)),
            ],
            options={
                'verbose_name': 'Proxy Provider',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AppClone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the app clone', max_length=255)),
                ('package_name', models.CharField(help_text='Unique package name of the cloned app', max_length=255, unique=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='Creation timestamp')),
                ('device', models.ForeignKey(help_text='The device this app clone is installed on', on_delete=django.db.models.deletion.CASCADE, related_name='app_clones', to='sessionbot.device')),
            ],
            options={
                'verbose_name': 'App Clone',
                'verbose_name_plural': 'App Clones',
                'ordering': ['-created_on', 'name'],
            },
        ),
        migrations.CreateModel(
            name='AccountCreationJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(choices=[('instagram', 'Instagram'), ('attendance', 'attendance'), ('twitter', 'twitter'), ('tiktok', 'tiktok'), ('cleaner', 'cleaner'), ('data_enricher', 'Data Enricher'), ('openai', 'OpenAI'), ('audience', 'Audience'), ('datahouse', 'DataHouse')], db_index=True, default='instagram', max_length=50)),
                ('name', models.CharField(help_text='Unique name for the account creation job', max_length=255, unique=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='Creation timestamp')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('paused', 'Paused')], default='pending', help_text='Current job status', max_length=20)),
                ('phone_config', models.JSONField(blank=True, default=dict, help_text='Phone provider configuration (country, city, etc.)', validators=[creator.models.validate_phone_config])),
                ('proxy_config', models.JSONField(blank=True, default=dict, help_text='Proxy provider configuration (country, city, etc.)', validators=[creator.models.validate_proxy_config])),
                ('after_creation_logic', models.JSONField(blank=True, default=list, help_text='Sequence of operations to perform after account creation', validators=[creator.models.validate_after_creation_logic])),
                ('settings', models.JSONField(blank=True, default=dict, help_text='Job execution settings', validators=[creator.models.validate_settings_config])),
                ('two_fa_live_support', models.BooleanField(default=False, help_text='Enable live 2FA support')),
                ('app_clones', models.ManyToManyField(help_text='App clones used for account creation', related_name='account_jobs', to='creator.AppClone')),
                ('device', models.ForeignKey(help_text='Device used for account creation', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='account_jobs', to='sessionbot.device')),
                ('email_provider', models.ForeignKey(blank=True, help_text='Email provider for account creation', null=True, on_delete=django.db.models.deletion.SET_NULL, to='creator.emailprovider')),
                ('phone_provider', models.ForeignKey(blank=True, help_text='Phone provider for verification', null=True, on_delete=django.db.models.deletion.SET_NULL, to='creator.phonenumberprovider')),
                ('proxy_provider', models.ForeignKey(blank=True, help_text='Proxy provider for network routing', null=True, on_delete=django.db.models.deletion.SET_NULL, to='creator.proxyprovider')),
            ],
            options={
                'verbose_name': 'Account Creation Job',
                'verbose_name_plural': 'Account Creation Jobs',
                'ordering': ['-created_on'],
            },
        ),
        migrations.AddConstraint(
            model_name='appclone',
            constraint=models.UniqueConstraint(fields=('device', 'package_name'), name='unique_device_package'),
        ),
    ]
