# Generated by Django 3.2 on 2024-10-11 08:05

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_jsonform.models.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customer', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CampaignTextContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=5000, null=True)),
                ('comment_list', models.TextField(blank=True, null=True)),
                ('influencer_profile', models.TextField(blank=True, null=True)),
                ('welcome_message', models.TextField(blank=True, null=True)),
                ('followup_message', models.TextField(blank=True, null=True)),
                ('reachout_message', models.TextField(blank=True, null=True)),
                ('response_to_reachout_message', models.TextField(blank=True, null=True)),
                ('target_hashtag', models.TextField(blank=True, null=True)),
                ('target_location', models.JSONField(blank=True, null=True)),
                ('message_list', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChildBot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(blank=True, max_length=100, null=True)),
                ('service', models.CharField(choices=[('instagram', 'Instagram'), ('twitter', 'twitter'), ('tiktok', 'tiktok')], db_index=True, default='instagram', max_length=50)),
                ('username', models.CharField(db_index=True, max_length=50)),
                ('password', models.CharField(max_length=50)),
                ('phone_number', models.IntegerField(blank=True, null=True)),
                ('email_address', models.EmailField(blank=True, db_index=True, max_length=254, null=True)),
                ('email_password', models.CharField(blank=True, max_length=100, null=True)),
                ('recovery_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('imap_email_host', models.CharField(blank=True, max_length=100, null=True)),
                ('imap_email_username', models.CharField(blank=True, max_length=100, null=True)),
                ('imap_email_password', models.CharField(blank=True, max_length=100, null=True)),
                ('imap_email_port', models.CharField(blank=True, max_length=6, null=True)),
                ('followers', models.PositiveIntegerField(default=0)),
                ('following', models.PositiveIntegerField(default=0)),
                ('post_count', models.PositiveIntegerField(default=0)),
                ('profile_picture', models.URLField(blank=True, max_length=500, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, max_length=500, null=True)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('created_on', models.DateField(default=django.utils.timezone.now)),
                ('cookie', models.FileField(blank=True, null=True, upload_to='login/cookies')),
                ('state', models.CharField(choices=[('active', 'Active'), ('disabled', 'Disablled')], default='active', max_length=50)),
                ('last_run_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='customer.customer')),
            ],
            options={
                'verbose_name': 'Bot',
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=5000, unique=True)),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='start_time')),
                ('expires', models.DateTimeField(blank=True, null=True, verbose_name='expires')),
                ('delay_range', models.CharField(blank=True, max_length=20, null=True)),
                ('max_interactions_per_runtask', models.IntegerField(default=5)),
                ('delay_between_runtasks', models.IntegerField(default=1)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('behavior', models.JSONField(default={'follow_per_session': 10, 'with_commenter': 'like_comment', 'with_liker': 'like', 'with_new_followers': 'welcome_message,like_3,comment_3,share_post', 'with_target': 'follow'})),
                ('max_scrape_bots', models.IntegerField(default=2)),
            ],
        ),
        migrations.CreateModel(
            name='Sharing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=5000, unique=True)),
                ('link', models.URLField(blank=True, null=True)),
                ('target_posts', models.CharField(blank=True, max_length=5000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TargetSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=5000, unique=True)),
                ('should_have_highlights', models.BooleanField(default=False)),
                ('should_be_public', models.BooleanField(default=True)),
                ('min_followers', models.IntegerField(blank=True, null=True)),
                ('max_followers', models.IntegerField(blank=True, null=True)),
                ('should_have_post_in_period', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Todo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('caption', models.TextField(blank=True)),
                ('location', models.CharField(blank=True, max_length=2550)),
                ('music', models.CharField(blank=True, max_length=2550)),
                ('file', models.FileField(upload_to='media/todos/')),
                ('bots', models.ManyToManyField(to='sessionbot.ChildBot')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(default='a2e036ec-87a7-11ef-a4cf-047c1611323a', max_length=50000, unique=True)),
                ('ref_id', models.CharField(default=models.CharField(default='a2e036ec-87a7-11ef-a4cf-047c1611323a', max_length=50000, unique=True), max_length=5000)),
                ('service', models.CharField(choices=[('instagram', 'Instagram'), ('twitter', 'twitter'), ('tiktok', 'tiktok')], db_index=True, default='instagram', max_length=50)),
                ('interact', models.BooleanField(default=False)),
                ('os', models.CharField(choices=[('android', 'android'), ('browser', 'browser')], max_length=500)),
                ('data_point', models.CharField(max_length=500)),
                ('end_point', models.CharField(max_length=500)),
                ('input', models.CharField(blank=True, max_length=500, null=True)),
                ('condition', models.CharField(blank=True, max_length=500, null=True)),
                ('profile', models.TextField(blank=True, null=True)),
                ('device', models.TextField(blank=True, null=True)),
                ('targets', models.TextField(blank=True, null=True)),
                ('add_data', models.JSONField(blank=True, null=True)),
                ('repeat', models.BooleanField(default=False)),
                ('repeat_duration', models.CharField(blank=True, max_length=20, null=True)),
                ('status', models.CharField(choices=[('pending', 'pending'), ('running', 'running'), ('failed', 'failed'), ('completed', 'completed')], default='pending', max_length=100)),
                ('last_state_changed_at', models.FloatField(blank=True, null=True)),
                ('report', models.BooleanField(default=False)),
                ('retries_count', models.IntegerField(default=0)),
                ('paused', models.BooleanField(default=False)),
                ('username', models.CharField(max_length=225, null=True, unique=True)),
                ('info', models.JSONField(default=dict)),
                ('versions', models.JSONField(default=dict)),
                ('dependent_on', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dependents', to='sessionbot.task')),
            ],
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=5000, null=True)),
                ('instance_id', models.CharField(max_length=500, null=True)),
                ('public_ip', models.URLField(blank=True, max_length=100, null=True)),
                ('instance_type', models.CharField(choices=[('main', 'Main'), ('data_server', 'DataServer'), ('login_server', 'LoginServer'), ('worker_server', 'WorkerServer'), ('dev_server', 'DevelopmentServer')], max_length=500)),
                ('state', models.CharField(choices=[('running', 'running'), ('stopped', 'stopped'), ('pending', 'pending'), ('shutting-down', 'shutting-down'), ('terminated', 'terminated'), ('stopping', 'stopping'), ('starting', 'starting'), ('backing_up', 'backing_up'), ('rebooting', 'Rebooting'), ('service_offline', 'Service Offline')], default='pending', max_length=500)),
                ('online_status', models.CharField(choices=[('offline', 'offline'), ('online', 'online')], default='offline', max_length=500)),
                ('running_process_count', models.IntegerField(default=0)),
                ('task_queue_count', models.IntegerField(default=0)),
                ('last_heart_beat', models.DateTimeField(blank=True, null=True)),
                ('ram_usage', models.IntegerField(default=0)),
                ('disk_usage', models.IntegerField(default=0)),
                ('tm_state', models.CharField(blank=True, choices=[('ACTIVE', 'Runing'), ('IN_ACTIVE', 'Restarting'), ('RESTART', 'Restarting')], max_length=10, null=True)),
                ('localstore_active', models.BooleanField(default=False)),
                ('access_secret_key', models.CharField(blank=True, max_length=5000, null=True, unique=True)),
                ('maximum_parallel_tasks_allowed', models.IntegerField(default=1)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='customer.customer')),
            ],
            options={
                'verbose_name': 'server',
            },
        ),
        migrations.CreateModel(
            name='ScrapeTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(choices=[('instagram', 'Instagram'), ('twitter', 'twitter'), ('tiktok', 'tiktok')], max_length=5000)),
                ('name', models.CharField(blank=True, max_length=5000, null=True)),
                ('internal_state', models.CharField(blank=True, choices=[('active', 'Active'), ('in_active', 'In-Active'), ('expired', 'Expired'), ('complete', 'Complete')], max_length=500, null=True)),
                ('input', models.TextField()),
                ('os', models.CharField(choices=[('android', 'Android'), ('browser', 'Browser')], default='android', max_length=5000)),
                ('localstore', models.BooleanField(default=False)),
                ('threading', models.BooleanField(default=False)),
                ('childbots', models.ManyToManyField(related_name='scrape_task', to='sessionbot.ChildBot')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='customer.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Proxy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_threads', models.IntegerField(default=1)),
                ('proxy_url', models.CharField(blank=True, max_length=500, null=True)),
                ('ua_string', models.CharField(max_length=5000, null=True)),
                ('is_available', models.BooleanField(default=True)),
                ('proxy_blacklisted', models.BooleanField(default=False)),
                ('provider', models.CharField(blank=True, max_length=1000, null=True)),
                ('tagged_bad_on', models.DateTimeField(blank=True, null=True)),
                ('verified', models.BooleanField(default=False)),
                ('proxy_type', models.CharField(choices=[('static_proxy', 'Static Proxy'), ('rotating_proxy', 'Rotating Proxy')], default='static_proxy', max_length=20)),
                ('proxy_protocol', models.CharField(choices=[('http', 'Http'), ('socks', 'Socks'), ('http_socks', 'Both')], default='http', max_length=20)),
                ('connected_to_server', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sessionbot.server')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='customer.customer')),
            ],
            options={
                'verbose_name_plural': 'proxies',
                'unique_together': {('customer', 'proxy_url')},
            },
        ),
        migrations.CreateModel(
            name='EmailProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('imap_email_host', models.CharField(max_length=200, unique=True)),
                ('imap_email_port', models.PositiveIntegerField()),
                ('imap_email_username', models.EmailField(max_length=100, unique=True)),
                ('imap_email_password', models.CharField(max_length=100)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer.customer')),
            ],
            options={
                'verbose_name': 'Email Provider',
                'unique_together': {('customer', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, unique=True)),
                ('serial_number', models.CharField(max_length=500, unique=True)),
                ('info', models.JSONField(blank=True, null=True)),
                ('connected_to_server', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sessionbot.server')),
            ],
        ),
        migrations.CreateModel(
            name='DemoGraphic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=5000, unique=True)),
                ('scrape_tasks', models.ManyToManyField(to='sessionbot.ScrapeTask')),
            ],
        ),
        migrations.AddField(
            model_name='childbot',
            name='device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sessionbot.device'),
        ),
        migrations.AddField(
            model_name='childbot',
            name='email_provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='login_profiles', to='sessionbot.emailprovider'),
        ),
        migrations.AddField(
            model_name='childbot',
            name='logged_in_on_servers',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sessionbot.server'),
        ),
        migrations.CreateModel(
            name='BulkCampaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=5000)),
                ('service', models.CharField(choices=[('instagram', 'Instagram'), ('twitter', 'twitter'), ('tiktok', 'tiktok')], db_index=True, default='instagram', max_length=100)),
                ('activity_to_perform', django_jsonform.models.fields.JSONField()),
                ('monitor', django_jsonform.models.fields.JSONField(blank=True, null=True)),
                ('os', models.CharField(choices=[('android', 'Android'), ('browser', 'Browser')], default='android', max_length=5000)),
                ('proxy_disable', models.BooleanField(default=False)),
                ('blacklist', models.TextField(blank=True, null=True)),
                ('required_interactions', models.IntegerField(default=10000)),
                ('launch_datetime', models.DateTimeField(blank=True, null=True)),
                ('stop_datetime', models.DateTimeField(blank=True, null=True)),
                ('internal_state', models.CharField(choices=[('active', 'Active'), ('in_active', 'In-Active'), ('expired', 'Expired'), ('complete', 'Complete')], default='in_active', max_length=100)),
                ('campaign_state', models.CharField(choices=[('launched', 'Launched'), ('stopping', 'Stopping'), ('stopped', 'Stopped'), ('paused', 'Paused'), ('deleted', 'Deleted'), ('draft', 'Draft')], default='draft', max_length=100)),
                ('is_completed', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('last_run_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('total_run_count', models.PositiveIntegerField(default=0, editable=False)),
                ('media_id', models.CharField(blank=True, max_length=100, null=True)),
                ('comment_id', models.CharField(blank=True, max_length=100, null=True)),
                ('request_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('childbots', models.ManyToManyField(related_name='campaign', to='sessionbot.ChildBot')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='customer.customer')),
                ('devices', models.ManyToManyField(blank=True, to='sessionbot.Device')),
                ('messaging', models.ManyToManyField(to='sessionbot.CampaignTextContent')),
                ('proxies', models.ManyToManyField(related_name='proxies', to='sessionbot.Proxy')),
                ('scrape_tasks', models.ManyToManyField(blank=True, related_name='campaign', to='sessionbot.ScrapeTask')),
                ('servers', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sessionbot.server')),
                ('sharing', models.ManyToManyField(blank=True, to='sessionbot.Sharing')),
                ('target_settings', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sessionbot.targetsettings')),
            ],
            options={
                'verbose_name': 'AutomationTask',
            },
        ),
        migrations.AlterUniqueTogether(
            name='childbot',
            unique_together={('customer', 'username')},
        ),
    ]
