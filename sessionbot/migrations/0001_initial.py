# Generated by Django 3.2.11 on 2024-01-16 12:04

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customer', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BulkCampaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=5000)),
                ('service', models.CharField(choices=[('instagram', 'Instagram'), ('twitter', 'twitter'), ('tiktok', 'tiktok')], db_index=True, default='instagram', max_length=100)),
                ('activity_to_perform', models.CharField(blank=True, choices=[('comment', 'comment'), ('like', 'like'), ('dm', 'dm'), ('like_comment', 'like_comment'), ('reply_to_comment', 'reply_to_comment'), ('follow', 'follow'), ('login', 'login'), ('retweet', 'retweet'), ('share_post', 'share post')], max_length=50, null=True)),
                ('localstore', models.BooleanField(default=False)),
                ('proxy_disable', models.BooleanField(default=False)),
                ('quantity', models.IntegerField(default=1)),
                ('comment_list', models.TextField(blank=True, null=True)),
                ('influencer_profile', models.TextField(blank=True, null=True)),
                ('welcome_message', models.TextField(blank=True, null=True)),
                ('followup_message', models.TextField(blank=True, null=True)),
                ('reachout_message', models.TextField(blank=True, null=True)),
                ('response_to_reachout_message', models.TextField(blank=True, null=True)),
                ('target_hashtag', models.TextField(blank=True, null=True)),
                ('target_location', models.JSONField(blank=True, null=True)),
                ('message_list', models.TextField(blank=True, null=True)),
                ('target_list', models.TextField(blank=True, null=True)),
                ('username_of_comment_owner', models.CharField(blank=True, max_length=100, null=True)),
                ('target_post', models.TextField(blank=True, null=True)),
                ('delay_range', models.CharField(blank=True, max_length=20, null=True)),
                ('max_interactions_per_runtask', models.IntegerField(default=5)),
                ('delay_between_runtasks', models.IntegerField(default=1)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('behavior', models.JSONField(default={'follow_per_session': 10, 'with_commenter': 'like_comment', 'with_liker': 'like', 'with_new_followers': 'welocome_message,like_3,comment_3,share_post', 'with_target': 'follow'})),
                ('max_scrape_bots', models.IntegerField(default=2)),
                ('blacklist', models.TextField(blank=True, null=True)),
                ('required_interactions', models.IntegerField(default=10000)),
                ('launch_datetime', models.DateTimeField(blank=True, null=True)),
                ('stop_datetime', models.DateTimeField(blank=True, null=True)),
                ('internal_state', models.CharField(choices=[('active', 'Active'), ('in_active', 'In-Active'), ('expired', 'Expired'), ('complete', 'Complete')], default='in_active', max_length=100)),
                ('campaign_state', models.CharField(choices=[('launched', 'Launched'), ('stopping', 'Stopping'), ('stopped', 'Stopped'), ('paused', 'Paused'), ('deleted', 'Deleted'), ('draft', 'Draft')], default='draft', max_length=100)),
                ('is_completed', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('last_run_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('total_run_count', models.PositiveIntegerField(default=0, editable=False)),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='start_time')),
                ('expires', models.DateTimeField(blank=True, null=True, verbose_name='expires')),
                ('media_id', models.CharField(blank=True, max_length=100, null=True)),
                ('comment_id', models.CharField(blank=True, max_length=100, null=True)),
                ('request_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer.customer')),
            ],
            options={
                'verbose_name': 'AutomationTask',
            },
        ),
        migrations.CreateModel(
            name='ChildBot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(blank=True, max_length=100, null=True)),
                ('service', models.CharField(choices=[('instagram', 'Instagram'), ('twitter', 'twitter'), ('tiktok', 'tiktok')], db_index=True, default='instagram', max_length=50)),
                ('username', models.CharField(db_index=True, max_length=50)),
                ('password', models.CharField(max_length=50)),
                ('phone_number', models.IntegerField(blank=True, null=True)),
                ('email_address', models.EmailField(blank=True, db_index=True, max_length=254, null=True)),
                ('email_password', models.CharField(blank=True, max_length=100, null=True)),
                ('recovery_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('imap_email_host', models.CharField(blank=True, max_length=100, null=True)),
                ('imap_email_username', models.CharField(blank=True, max_length=100, null=True)),
                ('imap_email_password', models.CharField(blank=True, max_length=100, null=True)),
                ('imap_email_port', models.CharField(blank=True, max_length=6, null=True)),
                ('followers', models.PositiveIntegerField(default=0)),
                ('following', models.PositiveIntegerField(default=0)),
                ('post_count', models.PositiveIntegerField(default=0)),
                ('profile_picture', models.URLField(blank=True, max_length=500, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, max_length=500, null=True)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('created_on', models.DateField(default=django.utils.timezone.now)),
                ('cookie', models.FileField(blank=True, upload_to='login/cookies')),
                ('state', models.CharField(choices=[('active', 'Active'), ('disabled', 'Disablled')], default='active', max_length=50)),
                ('last_run_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sessionbot.bulkcampaign')),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='customer.customer')),
            ],
            options={
                'verbose_name': 'Bot',
            },
        ),
        migrations.CreateModel(
            name='ScrapeTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(choices=[('instagram', 'Instagram'), ('twitter', 'twitter'), ('tiktok', 'tiktok')], max_length=5000)),
                ('name', models.CharField(blank=True, max_length=5000, null=True)),
                ('internal_state', models.CharField(blank=True, choices=[('active', 'Active'), ('in_active', 'In-Active'), ('expired', 'Expired'), ('complete', 'Complete')], max_length=500, null=True)),
                ('localstore', models.BooleanField(default=False)),
                ('threading', models.BooleanField(default=False)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='customer.customer')),
            ],
        ),
        migrations.CreateModel(
            name='EmailProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('imap_email_host', models.CharField(max_length=200)),
                ('imap_email_port', models.PositiveIntegerField()),
                ('imap_email_username', models.EmailField(max_length=100)),
                ('imap_email_password', models.CharField(max_length=100)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer.customer')),
            ],
            options={
                'verbose_name': 'Email Provider',
                'unique_together': {('customer', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(max_length=500, unique=True)),
                ('info', models.JSONField()),
                ('profiles', models.ManyToManyField(to='sessionbot.ChildBot')),
            ],
        ),
        migrations.AddField(
            model_name='childbot',
            name='email_provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='login_profiles', to='sessionbot.emailprovider'),
        ),
        migrations.AddField(
            model_name='childbot',
            name='scrape_tasks',
            field=models.ManyToManyField(blank=True, null=True, related_name='bots', to='sessionbot.ScrapeTask'),
        ),
        migrations.AddField(
            model_name='bulkcampaign',
            name='scrape_tasks',
            field=models.ManyToManyField(blank=True, null=True, related_name='campaign', to='sessionbot.ScrapeTask'),
        ),
        migrations.AlterUniqueTogether(
            name='childbot',
            unique_together={('customer', 'username')},
        ),
    ]
